#!/bin/sh
#
# Copyright Corey DeLasaux <cordelster@gmail.com> 2016
# Parts derived and copyright from open-pli
#
PREFIX=

. "$PREFIX/etc/jambox/jambox.conf"

notify() {
  # we don't really depend on the hotplug_e2_helper, but when it exists, call it
  if [ -x /usr/bin/hotplug_e2_helper ] ; then
    /usr/bin/hotplug_e2_helper $ACTION /block/$MDEV $PHYSDEVPATH
  fi
}

case "$ACTION" in
  add|"")
    ACTION="add"
    # check if already mounted
    if grep -q "^/dev/${MDEV} " /proc/mounts ; then
      # Already mounted
      exit 0
    fi
    DEVBASE=`expr substr $MDEV 1 3`
    # check for "please don't mount it" file
    if [ -f "/dev/nomount.${DEVBASE}" ] ; then
      # blocked
      exit 0
    fi
    # Run the result of blkid as a shell command
    eval `blkid /dev/${MDEV} | grep ${MDEV} | cut -d ':' -f 2`
    if [ -z "$TYPE" ] ; then
      notify
      exit 0
    fi
    if [ $TYPE == swap ] ; then
      if ! grep -q "^/dev/${MDEV} " /proc/swaps ; then
        swapon /dev/${MDEV}
      fi
      exit 0
    fi
    # check for full-disk partition
    if [ "${DEVBASE}" == "${MDEV}" ] ; then
      if [ -d /sys/block/${DEVBASE}/${DEVBASE}1 ] ; then
        # Partition detected, just tell and quit
        notify
        exit 0
      fi
      if [ ! -f /sys/block/${DEVBASE}/size ] ; then
        # No size at all
        exit 0
      fi
      if [ `cat /sys/block/${DEVBASE}/size` == 0 ] ; then
        # empty device, bail out
        exit 0
      fi
    fi
    # first allow fstab to determine the mountpoint
    if ! mount /dev/$MDEV > /dev/null 2>&1 ; then
      # no fstab entry, use automatic mountpoint
      if [ -z "${LABEL}" ] ; then
        REMOVABLE=`cat /sys/block/$DEVBASE/removable`
        readlink -fn /sys/block/$DEVBASE/device | grep -qs 'pci\|ahci'
        EXTERNAL=$?
        if [ "${REMOVABLE}" -eq "0" -a $EXTERNAL -eq 0 ] ; then
          # mount the first non-removable internal device on /media/hdd
          DEVICETYPE="hdd"
        else
          MODEL=`cat /sys/block/$DEVBASE/device/model`
          if [ "$MODEL" == "USB CF Reader   " ]; then
            DEVICETYPE="cf"
          elif [ "$MODEL" == "Compact Flash   " ]; then
            DEVICETYPE="cf"
          elif [ "$MODEL" == "USB SD Reader   " ]; then
            DEVICETYPE="mmc1"
          elif [ "$MODEL" == "USB SD  Reader  " ]; then
            DEVICETYPE="mmc1"
          elif [ "$MODEL" == "SD/MMC          " ]; then
            DEVICETYPE="mmc1"
          elif [ "$MODEL" == "USB MS Reader   " ]; then
            DEVICETYPE="mmc1"
          elif [ "$MODEL" == "SM/xD-Picture   " ]; then
            DEVICETYPE="mmc1"
          elif [ "$MODEL" == "USB SM Reader   " ]; then
            DEVICETYPE="mmc1"
          elif [ "$MODEL" == "MS/MS-Pro       " ]; then
            DEVICETYPE="mmc1"
          elif [ "$MDEV" == "mmcblk0p1" ]; then
            DEVICETYPE="mmc1"
          else
            DEVICETYPE="usb"
          fi
        fi
      else
        DEVICETYPE="${LABEL}"
      fi
      # Use mkdir as 'atomic' action, failure means someone beat us to the punch
      MOUNTPOINT="/media/$DEVICETYPE"
      if ! mkdir "${MOUNTPOINT}" ; then
        MOUNTPOINT="/media/$MDEV"
        mkdir -p "${MOUNTPOINT}"
      fi

      if ! mount -t auto -o noatime,rw,uid=0,gid=6,dmask=000,fmask=111,user,utf8,nofail /dev/$MDEV "${MOUNTPOINT}" ; then
        rmdir "${MOUNTPOINT}"
     fi
      # Create smb config
      if [ ! -x /lib/mdev/smb_mount ]; then
         wait 5
      else
      logger "USB $DEVICETYPE calling to create SMB share $MDEV $MOUNTPOINT"
      nohup /lib/mdev/smb_mount add $MDEV "${MOUNTPOINT}" &
      fi
      # Check existence of specific folders on drive and create links for them.
      for HAS_DIR in http ftp tftp console; do
        if [ -d $MOUNTPOINT/$HAS_DIR ]; then
          LINKPOINT=$MOUNTPOINT/$HAS_DIR
          case $HAS_DIR in
            http)
              ln -s $LINKPOINT $LINKHTTP/$DEVICETYPE
            ;;
            ftp)
              ln -s $LINKPOINT $LINKFTP/$DEVICETYPE
            ;;
            tftp)
              ln -s $LINKPOINT $LINKTFTP/$DEVICETYPE
            ;;
            console)
              ln -s $LINKPOINT $LINKCONSOLE
            ;;
            *)
          esac
          logger "USB $DEVICETYPE has $HAS_DIR directory creating Link $LINKPOINT"
        fi
      done
      # Check for network.txt on drive and setup eth0
      if [ -s $MOUNTPOINT/network.txt ]; then
        ipaddr=$(cat $MOUNTPOINT/network.txt | awk '{print $1}')
        mask=$(cat $MOUNTPOINT/network.txt | awk '{print $2}')
        cidr=$(echo $ipaddr | grep "/")
        if [ "$cidr" != "" ]; then
          NETWORK=$(echo $ipaddr | awk -F / '{print $1}')
          NETMASK=$(ipcalc -m $ipaddr | awk -F = '{print $2}')
          ifconfig eth0 $NETWORK netmask $NETMASK
          logger "USB Network config ip=$NETWORK mask=$NETMASK"
        else
          ifconfig eth0 $ipaddr netmask $mask
          logger "USB Network config ip=$ipaddr mask=$mask"
        fi
      fi
    fi
    ;;
  remove)
    MOUNTPOINT=`grep "^/dev/$MDEV\s" /proc/mounts | cut -d' ' -f 2 | sed 's/\\040/ /g'`
    if [ -z "${MOUNTPOINT}" ] ; then
      MOUNTPOINT="/media/$MDEV"
    fi
    /lib/mdev/smb_mount del $MDEV
    umount "${MOUNTPOINT}" || umount "/dev/${MDEV}"
    rmdir "${MOUNTPOINT}"
    # Remove any known associated soft links.
    for RMLINK in $LINKFTP $LINKHTTP $LINKTFTP $LINKCONSOLE
    do
      find $RMLINK -type l | while read f; do if [ ! -e "$f" ]; then rm -f "$f"; fi; done
    done
    ;;
  *)
    # Unexpected keyword
    logger "USB $DEVICETYPE unxpected error on removal"
    exit 1
    ;;
esac

notify
